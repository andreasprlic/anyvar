#!/usr/bin/env python3

import logging
import os
import sys

from biocommons.seqrepo import SeqRepo
from bioutils.exceptions import BioutilsError
import coloredlogs
import redis
from ga4gh.vr import models
from ga4gh.vr.dataproxy import SeqRepoDataProxy
from hgvs.exceptions import HGVSParseError
import tqdm

from anyvar import AnyVar
from anyvar.translator import Translator
from anyvar.extras.clinvarparser import ClinvarParser
from anyvar.storage.redisobjectstore import RedisObjectStore


_logger = logging.getLogger(__name__)


def firstn(gen, n=None):
    if n is None:
        yield from gen
    else:
        for i, e in enumerate(gen):
            yield e
            if i == n:
                break
        


if __name__ == "__main__":

    coloredlogs.install(level="INFO")

    seqrepo_dir = os.environ.get("SEQREPO_DIR", "/usr/local/share/seqrepo/latest")
    data_proxy = SeqRepoDataProxy(SeqRepo(root_dir=seqrepo_dir))
    ros = RedisObjectStore(redis=redis.Redis(db=15), models=models)
    av = AnyVar(object_store=ros, data_proxy=data_proxy)
    tlr = Translator(
        data_proxy = data_proxy,
        normalize=True,
        identify=True
    )


    cv_fn = sys.argv[1]
    cvrec_gen = (cvrec for cvrec in ClinvarParser(cv_fn) if cvrec.hgvs_expressions)
    pbar = tqdm.tqdm(firstn(cvrec_gen, 1000))
    for cvrec in pbar:
        #_logger.info(f"{cvrec.accession}; {cvrec.record_type}; {len(cvrec.hgvs_expressions)} hgvs expressions")
        for he in cvrec.hgvs_expressions:
            try:
                v = tlr.from_hgvs(he)
            except (ValueError, HGVSParseError, AttributeError, KeyError, BioutilsError):
                v = models.Text(definition=he)
            _id = av.put_object(v)
            #_logger.info(f"stored {_id} for {he}")

