openapi: 3.0.0

info:
  title: AnyVar
  description: >-
    AnyVar aspires to provide REST-based validation, normalization,
    identification, and registration of any biological variation.

  contact:
    name: Reece Hart
    email: reecehart@gmail.com
  version: 0.0.0

tags:
  - name: General
  - name: Variation
    description: A single endpoint for all classes of primitive Variation
  - name: Variation Subtypes
    description: Endpoints for specific variation types
  - name: Variation Sets
    description: Sets of Variation primitives
  - name: Locations
    description: >-
      Where Variation occurs
  - name: Internal
    description: >-
      Internal endpoints are exposed only for testing. They will not
      be exposed in production.


paths:
  ###########################################################################
  # General

  /info:
    get:
      tags: ["General"]
      description: >-
        Provides system information. May be used to ping system status.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"


  ###########################################################################
  # Variation
  
  /variation:
    put:
      tags: ["Variation"]
      summary: Create an instance of sequence variation.
      description: >-
        Creates an instance of sequence variation and returns a
        deterministically computed identifier.
        
        Requests with variant definitions that normalize to the same
        interal variant result in only one record and the same
        computed id is always returned.  That is, this endpoint is
        idempotent, irrespective of the input definition format.

        Alleles within haplotypes, and haplotypes withing genotypes,
        are subjected to canonical ordering rules. Therefore, the
        computed id of an haplotype in invariant with respect to the
        order of the defined alleles. The same invariance holds for
        genotypes and their component haplotypes.

        The following input formats are permitted:

          * text (`c.1105G>A`, `brca1`, `IVS7+1037T>C`, `46, XX; t(9;22)(q13;q22)`)
          * HGVS
          * ISCN
          * SPDI
          * gnomad (`1-55516888-G-GA`)
          * beacon (`13 : 32936732 G > C`)

      requestBody:
        content:
          application/json:
            schema:
              properties:
                definition:
                  description: >-
                    Creates a variation instance from the provided
                    `definition` parameter, which is interpreted
                    according to `format` parameter.

                    By default, the format is inferred from structure.
                    When inferred, the variation will be created as a
                    text record if other methods fail.  If format is
                    not auto and the variant cannot be parsed
                    appropriately, an error is returned.
                  type: string
                  example: "NC_000010.11:g.87894077C>T"
                accepted_format:
                  description: Expected format of the definition. 
                  type: string
                  enum:
                    - auto
                    - gnomad
                    - hgvs
                    - spdi
                    - text
                  default: auto
                normalize:
                  description: Normalize the allele in the specified direction.
                  type: string
                  enum:
                    - right
                    - left
                    - none
                  default: right
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          description: The variation could not be parsed or is otherwise invalid.
        501:
          description: >-
            The requested resource or operation is not currently
            supported. It may be supported in the future.

  /variation/{id}:
    get:
      tags: ["Variation"]
      description: gets a variation instance by id, may return any supported type of variation
      parameters:
        - name: id
          in: path
          description: variation id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
                

  ###########################################################################
  # Variation Subtypes
  
  /allele:
    put:
      tags: ["Variation Subtypes"]
      description: >-
        An Allele is a specific, single, and contiguous Sequence at a
        Location. Each alternative Sequence may be empty, shorter,
        longer, or the same length as the interval (e.g., due to one or
        more indels).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  description: >-
                    Allele definition, interpreted according to format
                  type: string
                  example: NC_000010.11:g.87894077C>T
                format:
                  description: format of definition
                  type: string
                  enum:
                    - "hgvs"
                  example: "hgvs"
              required:
                - definition
                - format
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allele"
                
  /allele/{id}:
    get:
      tags: ["Variation Subtypes"]
      description: >-
        An Allele is a specific, single, and contiguous Sequence at a
        Location. Each alternative Sequence may be empty, shorter,
        longer, or the same length as the interval (e.g., due to one or
        more indels).
      parameters:
        - name: id
          in: path
          description: sequence id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allele"


  ###########################################################################
  # Variation Sets
  
  /variationsets:
    get:
      description: search for a canonical allele
      tags: ["Variation Sets"]
      parameters:
        - name: hgvs
          in: query
          schema:
            type: string
          example: NC_000010.11:g.87894077C>T
      responses:
        200:
          description: found; variation returned

  /variationsets/{id}:
    get:
      description: gets a variation instance by id
      tags: ["Variation Sets"]
      parameters:
        - name: id
          in: path
          description: canonical variationset id
          required: true
          schema:
            type: string
      responses:
        200:
          description: found; variation returned


  ###########################################################################
  # Locations
  
  /locations/{id}:
    get:
      tags: ["Locations"]
      description: >-
        An identifiable position or region on a Sequence, defined by
        Sequence Id and an Interval.
      parameters:
        - name: id
          in: path
          description: sequence id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"


  # ######################################################################
  # INTERNAL ENDPOINTS FOR TESTING

  /positions:
    get:
      tags: ["Internal"]
      description: Return positions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
  
    put:
      tags: ["Internal"]
      description: create a position instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
            examples:
              Simple:
                value:
                  type: Interval
                  start: 22
                  end: 33
              BaseOffset:
                value:
                  type: Interval
                  start: 50
                  start_offset: -6
                  end: 60
                  end_offset: 7
              RangedInterval:
                value:
                  type: RangedInterval
                  start:
                    start: 100
                    end: 110
                  end:
                    start: 200
                    end: 210

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"

  /positions/{id}:
    get:
      description: >-
        Return a single position
      tags: ["Internal"]
      parameters:
        - name: id
          in: path
          description: position id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"


# ######################################################################
# COMPONENTS

components:
  schemas:
    Allele:
      type: object
      description: VMC Allele definition
      properties:
        id:
          type: string
          example: "GA_9IQxBPDC59B--y645TDCZv9ueavkGkUp"
        location_id:
          type: string
          example: "GL_tnVGwWWN0L_fEYK4hGF1Tzm7JULAkm2Z"
        state:
          type: string
          example: "T"

    Info:
      type: object
      example:
        version: "0.0.0"
        dependencies:
          biocommons.seqrepo:
            instance_directory: /usr/local/share/seqrepo/latest
            version: "0.4.2"
          hgvs:
            version: "1.2.4"
          bioutils:
            version: "0.4.2"

    Interval:
      allOf:
        - $ref: '#/components/x-bases/PositionBase'
        - type: object
          properties:
            type:
              enum: ["Interval"]
            start:
              type: integer
              nullable: true
            end:
              type: integer
              nullable: true
          additionalProperties: false
          required:
            - start
            - end
          example:
            type: "Interval"
            start: 11
            end: 22
          discriminator:
            propertyName: type

    Location:
      type: object
      properties:
        id:
          type: string
          example: "GL_tnVGwWWN0L_fEYK4hGF1Tzm7JULAkm2Z"
        sequence_id:
          type: string
          example: "GS_ss8r_wB0-b9r44TQTMmVTI92884QvBiB"
        position:
          $ref: "#/components/schemas/Position"

    NestedInterval:
      allOf:
        - $ref: '#/components/x-bases/PositionBase'
        - type: object
          properties:
            type:
              enum: ["NestedInterval"]
            inner:
              $ref: '#/components/schemas/Interval'
            outer:
              $ref: '#/components/schemas/Interval'
      example:
        type: NestedInterval
        outer:
          type: Interval
          start: 20
          end: 39
        inner:
          type: Interval
          start: 29
          end: 30
      
    Position:
      description: >-
        A Position represents a span of sequence.  Positions are
        always represented by contiguous spans using interbase
        coordinates.
      oneOf:
      - $ref: '#/components/schemas/Interval'
      - $ref: '#/components/schemas/NestedInterval'
      - $ref: '#/components/schemas/RangedInterval'

    RangedInterval:
      allOf:
        - $ref: '#/components/x-bases/PositionBase'
        - type: object
          properties:
            type:
              enum: ["RangedInterval"]
            start:
              $ref: '#/components/schemas/Interval'
            end:
              $ref: '#/components/schemas/Interval'
      example:
        type: RangedInterval
        start:
          type: Interval
          start: 20
          end: 29
        end:
          type: Interval
          start: 30
          end: 39

    TextVariation:
      type: object
      allOf:
        - $ref: '#/components/x-bases/IdentifiableObject'
        - type: object
          properties:
            type:
              type: string
              enum: ["TextVariation"]

    Variation:
      type: object
      properties:
        id:
          type: string
        type:
          type: enum
          enum: ["Text", "SequenceVariation"]


  x-bases:
    # x-bases stores reusable base definitions of schemas
    # They are not intended to be used in isolation.
    IdentifiableObject:
      type: object
      properties:
        id:
          type: string

    PositionBase:
      type: object
      properties:
        type:
          type: string
          enum: ["Interval", "NestedInterval", "RangedInterval"]
      required:
        - type
      discriminator:
        propertyName: type
        
    ResponseTemplate:
      type: object
      properties:
        messages:
          type: array
          items: string
        data:
          type: object
